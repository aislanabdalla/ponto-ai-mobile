name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, principal ]
    paths:
      - '**/*.dart'
      - '**/pubspec.yaml'
      - '**/android/**'
      - '.github/workflows/build-apk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_TOOL_OPTIONS: -Xmx3g
      GRADLE_OPTS: -Dorg.gradle.jvmargs='-Xmx3g -Dfile.encoding=UTF-8'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Flutter dir
        id: detect
        shell: bash
        run: |
          if [ -f "mobile/pubspec.yaml" ]; then echo "FLUTTER_DIR=mobile" >> $GITHUB_ENV; else echo "FLUTTER_DIR=." >> $GITHUB_ENV; fi
          echo "dir=${FLUTTER_DIR:-.}" >> $GITHUB_OUTPUT

      - name: Show tree
        run: |
          ls -la
          echo "----"
          ls -la "$FLUTTER_DIR"

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Normalize lib/ and pubspec name
        shell: bash
        run: |
          set -e
          cd "$FLUTTER_DIR"
          # se houver "biblioteca/", renomeia para lib/
          if [ ! -d lib ] && [ -d biblioteca ]; then mv biblioteca lib; fi
          # garante um main.dart mínimo
          if [ ! -f lib/main.dart ]; then
            cat > lib/main.dart <<'DART'
import 'package:flutter/material.dart';
void main() => runApp(const MaterialApp(home: Scaffold(body: Center(child: Text('Ponto-AI')))));
DART
          fi
          # corrige name inválido no pubspec (sem hífen/acentos)
          if grep -q '^name:' pubspec.yaml; then
            sed -i "s/^name:.*/name: ponto_ai/" pubspec.yaml
          else
            echo "name: ponto_ai" | cat - pubspec.yaml > pubspec.tmp && mv pubspec.tmp pubspec.yaml
          fi

      - name: Flutter doctor
        run: cd "$FLUTTER_DIR" && flutter doctor -v

      - name: Pub get
        run: cd "$FLUTTER_DIR" && flutter pub get

      - name: Ensure Android project (create if missing/unsupported)
        shell: bash
        run: |
          set -e
          cd "$FLUTTER_DIR"
          # cria android/ se não existir
          if [ ! -d android ]; then
            flutter create . --platforms=android
          fi
          # se continuar quebrando, regenera android mantendo lib/ e pubspec.yaml
          if ! [ -f android/gradlew ]; then
            mv lib lib_tmp; mv pubspec.yaml pubspec_tmp.yaml
            rm -rf android ios
            flutter create . --platforms=android
            rm -rf lib; mv lib_tmp lib
            mv pubspec_tmp.yaml pubspec.yaml
          fi
          chmod +x android/gradlew

      - name: Android SDK & licenses
        shell: bash
        run: |
          set -e
          export ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          SDKMGR="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -f "$SDKMGR" ]; then SDKMGR="$ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager"; fi
          yes | "$SDKMGR" --licenses || true
          "$SDKMGR" "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Force minSdk/compileSdk (best effort)
        shell: bash
        run: |
          APP="$FLUTTER_DIR/android/app/build.gradle"
          PROPS="$FLUTTER_DIR/android/gradle.properties"
          if [ -f "$APP" ]; then
            sed -i 's/minSdkVersion[[:space:]]\+[0-9][0-9]*/minSdkVersion 21/' "$APP" || true
            sed -i 's/compileSdkVersion[[:space:]]\+[0-9][0-9]*/compileSdkVersion 34/' "$APP" || true
          fi
          if [ -f "$PROPS" ]; then
            if grep -q "flutter.minSdkVersion" "$PROPS"; then
              sed -i 's/flutter.minSdkVersion=.*/flutter.minSdkVersion=21/' "$PROPS" || true
            else
              echo "flutter.minSdkVersion=21" >> "$PROPS"
            fi
          fi

      - name: Build APK (debug)
        run: cd "$FLUTTER_DIR" && flutter build apk --debug

      - name: Build APK (release - unsigned)
        run: cd "$FLUTTER_DIR" && flutter build apk --release

      - name: List APKs
        run: find "$FLUTTER_DIR/build/app/outputs" -type f -name "*.apk" -print

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: ponto-ai-apks
          path: |
            ${{ env.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
            ${{ env.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-release.apk
